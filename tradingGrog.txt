// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© gregwhiteman7

//@version=5
indicator("Grog", overlay=true)

//1
// processSum(sum) =>
//     var result = sum
//     while (result > 9)
//         var digits = str.tostring(result)
//         var total = 0
//         for i = 0 to (str.length(digits) - 1)
//             var charValue = int(str.tonumber(digits[i]))
//             total := total + charValue
//         result := total
//     result

//Super Secret
length = input(10, "Supertrend Length")
multiplier = input.float(3.0, "Supertrend Multiplier")
// grogmultiplier = input.float(3.0, "Grogtrend Multiplier")
emaPeriod = input(200, "EMA Period")

// Calculate Supertrend
var float supertrend = na
var float highestHigh = na
var float lowestLow = na
var float grogtrend = na
var float groghighestHigh = na
var float groglowestLow = na
var float world = na

for i = length to 1
    if ta.change(close[i]) > 0
        highestHigh := math.max(highestHigh, high[i])
    else
        lowestLow := math.min(lowestLow, low[i])

// // Function to check if the current time is a multiple of 47 minutes
// is47MinuteInterval() =>
//     minute(time) % 1 == 0

// // Function to check if the current time is at the start of a new hour
// isNewHour() =>
//     minute(time) == 0

// // Add label for the current hour
// if isNewHour()
//     label.new(x=bar_index, y=high, text=str.tostring(minute(time)), xloc=xloc.bar_index, color=color.white)

// // Add line every 47 minutes
// if is47MinuteInterval()
//     var total = 0
//     var minStr = str.tostring(minute(time))
//     var charValue = int(str.tonumber(str.tostring(minute(time))[0]))
//     total := total + charValue
//     if str.length(minStr) > 1
//         var charValue = int(str.tonumber(str.tostring(minute(time))[1]))
//         total := total + charValue
//     var min = charValue
//     //line.new(x1=bar_index, y1=low, x2=bar_index, y2=high, color=color.blue, width=2)
//     label.new(x=bar_index, y=high, text=str.tostring(minute(time)), xloc=xloc.bar_index, color=color.white)


// for i = length to 1



    // while (world > 9)
    //     var digits = str.tostring(world)
    //     var total = 0
    //     for i = 0 to (str.length(digits) - 1)
    //         var charValue = int(str.tonumber(digits[i]))
    //         total := total + charValue
    //     world := total

    //world := currentYear + currentMonth + currentDay + currentHour + currentMinute



    // for i = length to 1
    //     if ta.change(close[i]) > 0
    //         if world == 2 or world == 4 or world == 8
    //             result = 2
    //             groghighestHigh := ta.change(close) + result
    //         else if world == 6
    //             result = 1
    //             groghighestHigh := ta.change(close) + result
    //     else
    //         if world == 3 or world == 7 or world == 9
    //             result = 0
    //             groglowestLow := ta.change(close) + result
    //         else if world == 1 or world == 5
    //             result = -1
    //             groglowestLow := ta.change(close) + result



    // if ta.change(close[i]) > 0
    //     // Get current date and time components
    //     var currentYear = year(time)
    //     var currentMonth = month(time)
    //     var currentDay = dayofmonth(time)
    //     var currentHour = hour(time)
    //     var currentMinute = minute(time,"UTC-5")
    
    //     world := currentMinute
    //     groghighestHigh := math.max(groghighestHigh, high[i])
    // else
    //     // Get current date and time components
    //     var currentYear = year(time)
    //     var currentMonth = month(time)
    //     var currentDay = dayofmonth(time)
    //     var currentHour = hour(time)
    //     var currentMinute = minute(time,"UTC-5")
    
    //     world := currentMinute
    //     groglowestLow := math.min(groglowestLow, low[i])

    // if world == 2 or world == 4 or world == 8
    //     result = 2
    //     highestHigh := math.max(highestHigh, high[i])
    //     highestHigh := math.max(highestHigh, high[i])
    // else if world == 6
    //     result = 1
    //     highestHigh := math.max(highestHigh, high[i])
    // else if world == 3 or world == 7 or world == 9
    //     result = 0
    //     lowestLow := math.min(lowestLow, low[i])
    // else if world == 1 or world == 5
    //     result = -1
    //     lowestLow := math.min(lowestLow, low[i])
    //     lowestLow := math.min(lowestLow, low[i])

supertrend := ta.change(close) > 0 ? lowestLow + multiplier * ta.atr(length) : highestHigh - multiplier * ta.atr(length)
    //grogtrend := ta.change(close) > 0 ? groglowestLow + multiplier * ta.atr(length) : groghighestHigh - multiplier * ta.atr(length)

supertrendColor = supertrend > ta.ema(close, emaPeriod) ? color.green : color.red
//grogtrendColor = grogtrend > ta.ema(close, emaPeriod) ? color.rgb(22, 165, 231) : color.rgb(255, 194, 82)

// Calculate 200 EMA
ema200 = ta.ema(close, emaPeriod)
emaColor = close > ema200 ? color.green : color.red

// Plot Supertrend and EMA
plot(supertrend, color=supertrendColor, title="Supertrend")
//plot(grogtrend, color=grogtrendColor, title="Supertrend")
plot(ema200, color=emaColor, title="200 EMA")
//plot(world, color=emaColor, title="World")

// Determine Buy and Sell Conditions
buyCondition = ta.crossover(close, ema200) and close > supertrend
sellCondition = ta.crossunder(close, ema200) and close < supertrend

label.new(x=bar_index, y=high, text=str.tostring(lowestLow), xloc=xloc.bar_index, color=color.blue)

if buyCondition == true
    label.new(x=bar_index, y=high, text="Buy", xloc=xloc.bar_index, color=color.green)
if sellCondition == true
    label.new(x=bar_index, y=high, text="Sell", xloc=xloc.bar_index, color=color.red)
// Plot Buy and Sell Signals
//plotshape(buyCondition, title="Buy Signal", location=location.abovebar, color=color.green, style=shape.labelup, text="Buy")
//plotshape(sellCondition, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="Sell")
